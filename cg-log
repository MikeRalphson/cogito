#!/usr/bin/env bash
#
# Make a log of changes in a GIT branch.
# Copyright (c) Petr Baudis, 2005.
# Copyright (c) David Woodhouse, 2005.
#
# Display log information for files or a range of commits. The output
# will automatically be displayed in a pager unless it is piped to
# a program.
#
# OPTIONS
# -------
# Arguments not interpreted as options will be interpreted as filenames;
# cg-log then displays only changes in those files.
#
# -c::	Colorize
#	Colorize the output. The used colors are listed below together
#	with information about which log output (summary, full or both)
#	they apply to:
#		- `author`:	'cyan'		(both)
#		- `committer`:	'magenta'	(full)
#		- `header`:	'green'		(full)
#		- `files`:	'blue'		(full)
#		- `signoff`:	'yellow'	(full)
#		- `commit_id`:	'blue'		(summary)
#		- `date`:	'green'		(summary)
#		- `trim_mark`:	'magenta'	(summary)
#
# -f::	List affected files
#	List affected files. (No effect when passed along `-s`.)
#
# -r FROM_ID[..TO_ID]:: Limit to a set of revisions
#	Limit the log information to a set of revisions using either
#	'-r FROM_ID[..TO_ID]' or '-r FROM_ID -r TO_ID'. In both cases the
#	option expects IDs which resolve to commits and will include the
#	specified IDs. If 'TO_ID' is omitted all commits from 'FROM_ID'
#	to the initial commit is shown. If no revisions is specified,
#	the log information starting from 'HEAD' will be shown.
#
# -D DATE:: Limit to revisions newer than given DATE
#	Limit the log information to revisions newer than given DATE,
#	and on second time further restrain it to revisions older than
#	given date. Therefore, '-D "2 days ago" -D "yesterday"' will
#	show all the commits from the day before yesterday.
#
# -m::	End the log at the merge base of the revision set
#	End the log listing at the merge base of the -r arguments
#	(defaulting to HEAD and origin).
#
# -M, --no-merges:: Ignore merge commits
#	Don't display merge commits in the log.
#
# -R, --no-renames:: Do not follow renames
#	By default, `cg-log FILE` will automatically follow file history
#	across renames. That can add slight extra performance penalty and
#	sometimes you just do not want `cg-log` to adjust its list of
#	watched filenames. In that case, use this switch.
#
# -s::	Summarize the log entries
#	Show a one line summary for each log entry. The summary contains
#	information about the commit date, the author, the first line
#	of the commit log and the commit ID. Long author names and commit
#	IDs are trimmed and marked with an ending tilde (~).
#
# --summary:: Group commits by title
#	Generate the changes summary, listing the commit titles grouped
#	by their author. This is also known as a "shortlog", suitable
#	e.g. for contribution summaries of announcements.
#
# -S, --pickaxe STRING:: Limit to changes touching STRING ("pick-axe")
#	List only commits with changes concerning STRING (also known as
#	pick-axe). In other words, only commits where the parent contains
#	STRING and the child does not contain it at the same place in
#	a file or vice versa are shown. The STRING may contain any
#	special characters or even newlines (but you might need to quote
#	it properly when calling `cg-log` from a shell). It is matched
#	verbatim.
#
# -u USERNAME:: Limit to commit where author/committer matches USERNAME
#	List only commits where author or committer contains 'USERNAME'.
#	The search for 'USERNAME' is case-insensitive.
#
# ENVIRONMENT VARIABLES
# ---------------------
# PAGER::
#	The pager to display log information in, defaults to `less`.
#
# PAGER_FLAGS::
#	Flags to pass to the pager.
#
# CG_LESS::
#	This is what the $LESS environment variable value will be set
#	to before invoking $PAGER. It defaults to $LESS concatenated
#	with the `R` and `S` flags to allow displaying of colorized output
#	and to avoid long lines from wrapping when using `-s`.
#
# EXAMPLE USAGE
# -------------
# To show a log of changes between two releases tagged as 'releasetag-0.9'
# and 'releasetag-0.10' do:
#
#	$ cg-log -r releasetag-0.9..releasetag-0.10
#
# Similarily, to see which commits are in branch A but not in branch B,
#
#	$ cg-log -r B..A
#
# (meaning "all the commits which newly appear along the way from B to A").
#
# If you see a dubious "if (current->uid = 0)" test in a file and wonder
# about its genesis, you can run
#
#	$ cg-log -S "if (current->uid = 0)" filename
#
# (you can obviously refrain from limiting the pick-axe to a particular
# file, but it will make it significantly slower).
#
# NOTES
# -----
# The ':' is equivalent to '..' in revisions range specification (to make
# things more comfortable to SVN users). See cogito(7) for more details
# about revision specification.

USAGE="cg-log [-D DATE] [-r FROM_ID[..TO_ID]] [-s] [--summary] [OTHER_OPTIONS] FILE..."

. "${COGITO_LIB}"cg-Xlib || exit 1
# Try to fix the annoying "Broken pipe" output. May not help, but apparently
# at least somewhere it does. Bash is broken.
trap exit SIGPIPE


list_commit_files()
{
	if [ ${#files[@]} -eq 0 ]; then
		echo "    * no changes:"
		echo
		return
	fi
	tree1="$1"
	tree2="$2"
	line=
	sep="    * $colfiles"
	for file in "${files[@]}"; do
		echo -n "$sep"
		sep=", "
		line="$line$sep$file"
		if [ ${#line} -le 74 ]; then
			echo -n "$file"
		else
			line="      $file"
			echo "$coldefault"
			echo -n "      $colfiles$file"
		fi
	done
	echo "$coldefault:"
	echo
}

print_commit_contents()
{
	[ "$list_files" ] && list_commit_files
	echo "$msg"
}

reset_commit_info()
{
	commit=
	tree=
	parents=()
	author=
	committer=
	msg=
	files=()

	# The $state variable mostly describes what should happen on the next
	# empty line.
	state=printhdr
}

process_commit_line()
{
	if [ "$key" = "%" ] || [ "$key" = "%$colsignoff" ]; then
		# The fast common case
		[ "$state" = silent ] || msg="$msg    ${rest:1}
"
		return
	fi
	case "$key" in
	"commit"|"diff-tree")
		reset_commit_info
		commit="${rest:0:40}"
		;;
	"tree")
		tree="$rest"
		;;
	"parent")
		parents[${#parents[@]}]="$rest"
		;;
	"committer")
		committer="$rest"
		;;
	"author")
		author="$rest"
		;;
	:)
		orest="$rest";
		rest="${rest#*	}"
		while [ x"$rest" != x"$orest" ]; do
			files[${#files[@]}]="${rest%%	*}"
			# Multiple tab-separated filenames are present in case
			# of rename entries.
			orest="$rest"
			rest="${rest#*	}"
		done
		;;
	"")
		if [ "$state" = silent ]; then
			return
		fi
		if [ "$state" = waitdiff ]; then
			# We cannot hook this to ^: since the diff may be empty
			state=showcommit
			return
		fi
		if [ "$state" = showcommit ]; then
			print_commit_contents
			return
		fi
		if [ "$state" != printhdr ]; then
			die "internal error - state '$state'"
		fi

		if [ "$user" ]; then
			if ! [[ "$author" == *"$user"* || "$committer" == *"$user"* ]]; then
				state=silent
				return
			fi
		fi
		if [ "$summary" ]; then
			# Print summary
			commit="${commit%:*}"
			author="${author% <*}"
			# We want wordsplitting in the $date here, to get
			# TZ as separate argument.
			date=(${committer#*> })
			showdate ${date[*]} '+%F %H:%M'; date="$_showdate"
			read -r title
			if [ "${#author}" -gt 15 ]; then
				author="${author:0:14}$coltrim~"
			fi
			if [ "${COLUMNS:-0}" -le 90 ]; then
				commit="${commit:0:12}$coltrim~"
			fi

			printf "$colcommit%s $colauthor%-15s $coldate%s $coldefault%s\n" \
				"${commit%:*}" "$author" "$date" "${title:3}"
			state=silent
			return
		fi

		echo "${colheader}commit ${commit%:*} $coldefault"
		echo "${colheader}tree $tree $coldefault"

		for parent in "${parents[@]}"; do
			echo "${colheader}parent $parent $coldefault"
		done

		# We want wordsplitting in the $date here, to get
		# TZ as separate argument.
		date=(${author#*> })
		showdate ${date[*]}; pdate="$_showdate"
		[ "$pdate" ] && author="${author%> *}> $pdate"
		echo "${colauthor}author $author $coldefault"

		date=(${committer#*> })
		showdate ${date[*]}; pdate="$_showdate"
		[ "$pdate" ] && committer="${committer%> *}> $pdate"
		echo "${colcommitter}committer $committer $coldefault"

		echo
		if [ "$difffilter" ]; then
			state=waitdiff
		else
			state=showcommit
		fi
		;;
	esac
}

print_commit_log()
{
	reset_commit_info
	sed -e '
		s/^:/: /
		s/^    \(.*\)/% @\1/
		/^% *@[Ss]igned-[Oo]ff-[Bb]y:.*/ s/^% @\(.*\)/% @'$colsignoff'\1'$coldefault'/
		/^% *@[Aa][Cc][Kk]ed-[Bb]y:.*/ s/^% @\(.*\)/% @'$colsignoff'\1'$coldefault'/
	' | { while read -r key rest; do
		trap exit SIGPIPE
		process_commit_line
	done; [ "$state" = "showcommit" ] && print_commit_contents # the last commit
	}
}


[ "$COLUMNS" ] || COLUMNS="$(tput cols)"

colheader=
colauthor=
colcommitter=
colfiles=
colsignoff=
colcommit=
coldate=
coltrim=
coldefault=
difffilter=
followrenames=
neverfollowrenames=

list_files=
log_start=
log_end=
summary=
shortlog=
user=
mergebase=
date_from=
date_to=
no_merges=
always=--always
diffmerges=-m
pickaxe=()

while optparse; do
	if optparse -c; then
		# See terminfo(5), "Color Handling"
		colheader="$(tput setaf 2)"    # Green
		colauthor="$(tput setaf 6)"    # Cyan
		colcommitter="$(tput setaf 5)" # Magenta
		colfiles="$(tput setaf 4)"     # Blue
		colsignoff="$(tput setaf 3)"   # Yellow

		colcommit="$(tput setaf 4)"
		coldate="$(tput setaf 2)"
		coltrim="$(tput setaf 5)"

		coldefault="$(tput op)"        # Restore default
	elif optparse -f; then
		list_files=1
		difffilter=listfiles
	elif optparse -u=; then
		user="$OPTARG"
	elif optparse -r=; then
		if echo "$OPTARG" | fgrep -q '..'; then
			log_end="${OPTARG#*..}"
			[ "$log_end" ] || log_end="HEAD"
			log_start="${OPTARG%..*}"
		elif echo "$OPTARG" | grep -q ':'; then
			log_end="${OPTARG#*:}"
			[ "$log_end" ] || log_end="HEAD"
			log_start="${OPTARG%:*}"
		elif [ -z "$log_start" ]; then
			log_start="$OPTARG"
		else
			log_end="$OPTARG"
		fi
	elif optparse -D=; then
		if [ -z "$date_from" ]; then
			date_from="--max-age=$(date -d "$OPTARG" +%s)" || exit 1
		else
			date_to="--min-age=$(date -d "$OPTARG" +%s)" || exit 1
		fi
	elif optparse -d=; then
		die "the -d option was renamed to -D"
	elif optparse -m; then
		mergebase=1
	elif optparse -M || optparse --no-merges; then
		no_merges="--no-merges"
		diffmerges=
	elif optparse -R || optparse --no-renames; then
		neverfollowrenames=1
	elif optparse -s; then
		summary=1
	elif optparse -S= || optparse --pickaxe=; then
		always=
		pickaxe=(-S"$OPTARG")
		difffilter=pickaxe
	elif optparse --summary; then
		shortlog=1
	else
		optfail
	fi
done


if [ "$mergebase" ]; then
	[ "$log_start" ] || log_start="HEAD"
	[ "$log_end" ] || log_end="origin"
	id1="$(cg-object-id -c "$log_start")" || exit 1
	id2="$(cg-object-id -c "$log_end")" || exit 1
	conservative_merge_base "$id1" "$id2" || exit 1
	[ "$_cg_base_conservative" ] &&
		warn -b "multiple merge bases, picking the most conservative one"
	log_start="$_cg_baselist"
fi

if [ "$shortlog" ]; then
	fmt="--pretty=short"
else
	fmt="--pretty=raw"
fi
# Word splitting is ok here and we want to auto-drop empty dates.
revls="$no_merges $date_from $date_to"

id1="$(cg-object-id -c "$log_start")" || exit 1
if [ "$log_end" ]; then
	id2="$(cg-object-id -c "$log_end")" || exit 1
	revls="$revls ^$id1"
	revlsstart="$id2"
else
	revlsstart="$id1"
fi

sep=
if [ "${ARGS[*]}" ]; then
	[ "$neverfollowrenames" ] || followrenames=1
	sep=--
fi

# Translate arguments to relpath:
if [ "$_git_relpath" ]; then
	for (( i=0; i<${#ARGS[@]}; i++ )); do
		ARGS[$i]="$_git_relpath${ARGS[$i]}"
	done
fi

[ "$followrenames" ] && difffilter=implied

# A curious pipeline:
rev_extract()
{
	if [ "$followrenames" ]; then
		[ "${ARGS[*]}" ] || die "internal error: no files to follow renames on"
		# We ignore $fmt but that's no biggie, shortlog
		# will actually work anyway.
		"${COGITO_LIB}"cg-Xfollowrenames $revls -- \
			--root --pickaxe-all $diffmerges $always "${pickaxe[@]}" -- \
			$revlsstart -- "${ARGS[@]}"
	elif [ "$difffilter" ]; then
		git-rev-list $revls $revlsstart $sep "${ARGS[@]}" | \
		git-diff-tree -r --stdin --root --pickaxe-all $diffmerges $always $fmt "${pickaxe[@]}"
	else
		git-rev-list $revls $revlsstart $fmt $sep "${ARGS[@]}"
	fi
}

rev_show()
{
	if [ "$shortlog" ]; then
		git-shortlog | pager
	else
		# LESS="S" will prevent less to wrap too long titles
		# to multiple lines; you can scroll horizontally.
		print_commit_log | _local_CG_LESS="S" pager
	fi
}

rev_extract | rev_show

exit 0
