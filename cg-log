#!/usr/bin/env bash
#
# Make a log of changes in a GIT branch.
# Copyright (c) Petr Baudis, 2005.
# Copyright (c) David Woodhouse, 2005.
#
# Takes a -c option to add color to the output.
# Currently, the colors are:
#
#	header		Green	
#	author 		Cyan
#	committer	Magenta
#	files		Blue
#	signoff		Yellow
#
# Takes an -f option to list which files was changed.
#
# Takes -u"username" to list only commits where author or
# committer contains username.
#
# Takes an -r followed with id resolving to a commit to start from
# (HEAD by default), or id1:id2 representing an (id1;id2] range
# of commits to show.
#
# The rest of arguments are took as filenames; cg-log then displays
# only changes in those files.

. ${COGITO_LIB}cg-Xlib
# Try to fix the annoying "Broken pipe" output. May not help, but apparently
# at least somewhere it does. Bash is broken.
trap exit SIGPIPE

colheader=
colauthor=
colcommitter=
colfiles=
colsignoff=
coldefault=
list_files=
log_start=
log_end=
user=

while [ "$1" ]; do
	arg="$1"
	shift
	case "$arg" in
	-c)
		# See terminfo(5), "Color Handling"
		colheader="$(tput setaf 2)"    # Green
		colauthor="$(tput setaf 6)"    # Cyan
		colcommitter="$(tput setaf 5)" # Magenta
		colfiles="$(tput setaf 4)"     # Blue
		colsignoff="$(tput setaf 3)"   # Yellow
		coldefault="$(tput op)"        # Restore default
		;;
	-f)
		list_files=1
		;;
	-u*)
		user="${arg#-u}"
		;;
	-r)
		if echo "$1" | grep -q ':'; then
			log_end=$(echo "$1" | cut -d : -f 2)
			[ "$log_end" ] || log_end="HEAD"
			log_start=$(echo "$1" | cut -d : -f 1)
		elif [ -z "$log_start" ]; then
			log_start="$1"
		else
			log_end="$1"
		fi
		shift
		;;
	*)
		break
		;;
	esac
done

list_commit_files()
{
	tree1="$1"
	tree2="$2"
	line=
	sep="    * $colfiles"
	# List all files for for the initial commit
	if [ -z $tree2 ]; then
		list_cmd="git-ls-tree $tree1"
	else
		list_cmd="git-diff-tree -r $tree1 $tree2"
	fi
	echo
	$list_cmd | cut -f 2- | while read file; do
		echo -n "$sep"
		sep=", "
		if [ $(echo "$line$sep$file" | wc -c) -le 75 ]; then
			line="$line$sep$file"
			echo -n "$file"
		else
			line="      $file"
			echo "$coldefault"
			echo -n "      $colfiles$file"
		fi
	done
	echo "$coldefault:"
}

if [ "$log_end" ]; then
	id1="$(commit-id $log_start)" || exit 1
	id2="$(commit-id $log_end)" || exit 1
	revls="git-rev-tree $id2 ^$id1"
	revsort="sort -rn"
	revfmt="git-rev-tree"
else
	id1="$(commit-id $log_start)" || exit 1
	revls="git-rev-list $id1"
	revsort="cat"
	revfmt="git-rev-list"
fi

$revls | $revsort | while read time commit parents; do
	trap exit SIGPIPE
	tree1=
	tree2=
	[ "$revfmt" = "git-rev-list" ] && commit="$time"
	if [ $# -ne 0 ]; then
		parent=$(git-cat-file commit $commit | sed -n '2s/parent //p;2Q')
		[ "$parent" ] && [ "$(git-diff-tree -r $commit $parent "$@")" ] || continue
	fi
	if [ "$user" ]; then
		git-cat-file commit $commit | grep -e '^author ' -e '^committer ' | grep -qi "$user" || continue
	fi
	echo $colheader""commit ${commit%:*} $coldefault;
	git-cat-file commit $commit | \
		while read key rest; do
			trap exit SIGPIPE
			case "$key" in
			"author"|"committer")
				if [ "$key" = "author" ]; then
					color="$colauthor"
				else
					color="$colcommitter"
				fi

				date=(${rest#*> })
				pdate="$(showdate $date)"
				if [ "$pdate" ]; then
					echo -n $color$key $rest | sed "s/>.*/> $pdate/"
					echo $coldefault
				else
					echo $color$key $rest $coldefault
				fi
				;;
			"tree"|"parent")
				if [ -z $tree1 ]; then
					tree1=$rest
				elif [ -z $tree2 ]; then
					tree2=$rest
				fi
				echo $colheader$key $rest $coldefault
				;;
			"")
				if [ -n "$list_files" ]; then
					list_commit_files "$tree1" "$tree2"
				fi
				echo; sed -re '
					/ *Signed-off-by:.*/Is//'$colsignoff'&'$coldefault'/
					/ *Acked-by:.*/Is//'$colsignoff'&'$coldefault'/
					s/./    &/
				'
				;;
			*)
				echo $colheader$key $rest $coldefault
				;;
			esac

		done
	echo
done | ${PAGER:-less} ${PAGER_FLAGS:--R}
