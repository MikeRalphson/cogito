#!/usr/bin/env bash
#
# Make a diff between two GIT trees.
# Copyright (c) Petr Baudis, 2005
#
# By default compares the current working tree to the state at the
# last commit. You can specify -r rev1:rev2 or -r rev1 -r rev2 to
# tell it to make a diff between the specified revisions. If you
# do not specify a revision, the current working tree is implied
# (note that no revision is different from empty revision - -r rev:
# compares between rev and HEAD, while -r rev compares between rev
# and working tree).
#
# -c colorizes the diff output
#
# -p instead of one ID denotes a parent commit to the specified ID
# (which must not be a tree, obviously).
#
# Takes -m to base the diff at the merge base of the -r arguments
# (defaulting to master and origin).
#
# Outputs a diff converting the first tree to the second one.

. ${COGITO_LIB}cg-Xlib


id1=" "
id2=" "
parent=
opt_color=
mergebase=

# TODO: Make cg-log use this too.
setup_colors()
{
	local C="diffhdr=1;36:diffhdradd=1;32:diffadd=32:diffhdrmod=1;35:diffmod=35:diffhdrrem=1;31:diffrem=31:diffhunk=36:diffctx=34:diffcctx=33:default=0"
	[ -n "$COGITO_COLORS" ] && C="$C:$COGITO_COLORS"

	C=${C//=/=\'$'\e'[}
	C=col${C//:/m\'; col}m\'
	#coldefault=$(tput op)
	eval $C
}

while [ "$1" ]; do
	arg="$1"
	shift
	case "$arg" in
	-c)
		opt_color=1
		setup_colors
		;;
	-p)
		parent=1
		;;
	-r)
		if echo "$1" | grep -q ':'; then
			id2=$(echo "$1" | cut -d : -f 2)
			[ "$id2" ] || log_end="HEAD"
			id1=$(echo "$1" | cut -d : -f 1)
		elif [ "$id1" = " " ]; then
			id1="$1"
		else
			id2="$1"
		fi
		shift
		;;
	-m)
		mergebase=1
		;;
	*)
		break
		;;
	esac
done

colorize() {
	if [ "$opt_color" ]; then
		gawk '
		{ if (/^(Index:|diff --git) /)
		    print "'$coldiffhdr'" $0 "'$coldefault'"
		  else if (/^======*$/)
		    print "'$coldiffhdr'" $0 "'$coldefault'"
		  else if (/^\+\+\+/)
		    print "'$coldiffhdradd'" $0 "'$coldefault'"
		  else if (/^\*\*\*/)
		    print "'$coldiffhdrmod'" $0 "'$coldefault'"
		  else if (/^---/)
		    print "'$coldiffhdrrem'" $0 "'$coldefault'"
		  else if (/^(\+|new( file)? mode )/)
		    print "'$coldiffadd'" $0 "'$coldefault'"
		  else if (/^(-|(deleted file|old) mode )/)
		    print "'$coldiffrem'" $0 "'$coldefault'"
		  else if (/^!/)
		    print "'$coldiffmod'" $0 "'$coldefault'"
		  else if (/^@@ \-[0-9]+(,[0-9]+)? \+[0-9]+(,[0-9]+)? @@/)
		    print gensub(/^(@@[^@]*@@)([ \t]*)(.*)/,
		         "'$coldiffhunk'" "\\1" "'$coldefault'" \
			 "\\2" \
			 "'$coldiffctx'" "\\3" "'$coldefault'", "")
		  else if (/^\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*/)
		    print "'$coldiffcctx'" $0 "'$coldefault'"
		  else
		    print
		}'
	else
		cat
	fi
}

if [ "$parent" ]; then
	id2="$id1"
	id1=$(parent-id "$id2" | head -n 1) || exit 1
fi

if [ "$mergebase" ]; then
	[ "$id1" != " " ] || id1="origin"
	[ "$id2" != " " ] || id2="master"
	id1=$(git-merge-base $(commit-id $id1) $(commit-id $id2))
fi


filter=
if [ "$*" ]; then
	filter=$(mktemp -t gitdiff.XXXXXX)
	for file in "$@"; do
		echo "$file" >>$filter
	done
fi

if [ "$id2" = " " ]; then
	if [ "$id1" != " " ]; then
		tree=$(tree-id "$id1") || exit 1
	else
		tree=$(tree-id) || exit 1
	fi

	# Ensure to only diff modified files
	git-update-cache --refresh >/dev/null

	# FIXME: Update ret based on what did we match. And take "$@"
	# to account after all.
	ret=
	git-diff-cache -r -p $tree | colorize

	[ "$filter" ] && rm $filter

	[ "$ret" ] && die "no files matched"
	exit $ret
fi


id1=$(tree-id "$id1") || exit 1
id2=$(tree-id "$id2") || exit 1

[ "$id1" = "$id2" ] && die "trying to diff $id1 against itself"

git-diff-tree -r -p $id1 $id2 | colorize

[ "$filter" ] && rm $filter
exit 0
