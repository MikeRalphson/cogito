#!/usr/bin/env bash
#
# Merge two files.
# Copyright (c) Linus Torvalds, 2005
#
# This is the git per-file merge script, called with
#
#   $1 - original file SHA1 (or empty)
#   $2 - file in branch1 SHA1 (or empty)
#   $3 - file in branch2 SHA1 (or empty)
#   $4 - pathname in repository
#   $5 - orignal file mode (or empty)
#   $6 - file in branch1 mode (or empty)
#   $7 - file in branch2 mode (or empty)
#
# We are designed to merge $3 _to_ $2, so we will give it
# a preference.
#
#
# Handle some trivial cases.. The _really_ trivial cases have
# been handled already by git-read-tree, but that one doesn't
# do any merges that might change the tree layout.
#

. ${COGITO_LIB}cg-Xlib || exit 1

id0="${ARGS[0]}"
id1="${ARGS[1]}"
id2="${ARGS[2]}"
file="${ARGS[3]}"
mode0="${ARGS[4]}"
mode1="${ARGS[5]}"
mode2="${ARGS[6]}"

error()
{
	echo "MERGE ERROR: $@" >&2
	return 1
}

warning()
{
	echo "MERGE WARNING: $@" >&2
}


case "${id0:-.}${id1:-.}${id2:-.}" in
#
# Deleted in both or deleted in one and unchanged in the other
#
"$id0.." | "$id0.$id0" | "$id0$id0.")
	#echo "Removing $file"
	if test -f "$file"; then
		rm -f -- "$file"
	fi &&
		exec git-update-index --remove -- "$file"
	;;

#
# Added in one.
#
".$id1." | "..$id2" )
	#echo "Adding $file"
	git-update-index --add --cacheinfo "$mode1$mode2" "$id1$id2" "$file" &&
		exec git-checkout-index -u -f -- "$file"
	;;

#
# Added in both (check for same permissions).
#
".$id2$id1")
	#echo "Adding $file"
	git-update-index --add --cacheinfo "$mode1" "$id1" "$file" &&
		git-checkout-index -u -f -- "$file"
	ret=$?
	if [ "$mode1" != "$mode2" ]; then
		error "$file: added in both branches, permissions conflict $mode1->$mode2"
		exit 1
	fi
	exit $ret
	;;

#
# Modified in both, but differently.
#
"$id0$id1$id2")
	echo "... Auto-merging $file"
	orig=$(git-unpack-file $id0)
	src2=$(git-unpack-file $id2)

	# We reset the index to the first branch, making
	# git-diff-file useful
	git-update-index --add --cacheinfo "$mode1" "$id1" "$file"
		git-checkout-index -u -f -- "$file" &&
		merge "$file" "$orig" "$src2"
	ret=$?
	rm -f -- "$orig" "$src2"

	if [ "$mode1" != "$mode2" ]; then
		error "Permissions conflict: $mode0->$mode1,$mode2."
		ret=1
	fi

	if [ $ret -ne 0 ]; then
		# The user already gets the warning from merge itself and
		# from merge-cache too. This is too much.
		#error "Auto-merge failed"
		exit 1
	fi
	exec git-update-index -- "$file"
	;;

*)
	error "$file: Not handling case: ${id0:-empty} -> ${id1:-empty} -> ${id2:-empty}"
	;;
esac
exit 1
