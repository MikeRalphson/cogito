#!/bin/sh
#
# The GIT scripted toolkit.
# Copyright (c) Petr Baudis, 2005
#
# This is the central command for the GIT toolkit, providing a humanly
# usable SCM-like interface to GIT.
#
# This command mostly only multiplexes to the individual script based
# on the first argument.

error () {
	echo git: $@ >&2
}
die () {
	error $@
	exit 1
}


help () {
	cat <<__END__
The GIT scripted toolkit  $(gitversion.sh)

Usage: git COMMAND [ARG]...

Available commands:
	add		FILE...
	addremote	RNAME RSYNC_URL
	apply				< patch on stdin
	cancel
	ci, commit	[FILE...]	< log message on stdin
	diff		[FROM_ID [TO_ID]]
	export		DESTDIR
	help
	init
	lntree		DESTDIR
	log
	ls		[TREE_ID]
	lsobj		[OBJTYPE]
	merge		-b BASE_ID FROM_ID
	pull		[RNAME]
	rm		FILE...
	tag		TNAME [COMMIT_ID]
	track		[RNAME]
	version

Note that these expressions can be used interchangably as "ID"s:
	empty string (current HEAD)
	local (the local branch if tracking a remote one)
	remote name (as registered with git addremote)
	tag name (as registered with git tag)
	shortcut hash (shorted unambiguous hash lead)
	commit object hash (as returned by commit-id)
	tree object hash (accepted only by some commands)
__END__
}


cmd=$1; shift
if [ ! "$cmd" ]; then
	error "missing command"
	help
	exit 1
fi


### XXX: Compatibility hack.
# Introduced at 2005-04-12, to be removed few days later.
[ -d .dircache ] && [ ! -e .git ] && mv .dircache .git
# Introduced at 2005-04-13:
if [ ! -d .git/heads ]; then
	mkdir .git/heads || exit 1
	for h in .git/HEAD.*; do
		[ "$h" != "local" ] && \
			mv $h .git/heads/$(echo $h | cut -d . -f 3-)
	done
fi


case "$cmd" in
"add")        gitadd.sh "$@";;
"addremote")  gitaddremote.sh "$@";;
"apply")      gitapply.sh "$@";;
"cancel")     gitcancel.sh "$@";;
"commit" | "ci")
              gitcommit.sh "$@";;
"diff")       gitdiff.sh "$@";;
"export")     gitexport.sh "$@";;
"help")       help "$@";;
"init")       gitinit.sh "$@";;
"lntree")     gitlntree.sh "$@";;
"log")        gitlog.sh "$@";;
"ls")         gitls.sh "$@";;
"lsobj")      gitlsobj.sh "$@";;
"merge")      gitmerge.sh "$@";;
"pull")       gitpull.sh "$@";;
"rm")         gitrm.sh "$@";;
"tag")        gittag.sh "$@";;
"track")      gittrack.sh "$@";;
"version")    gitversion.sh "$@";;
*)            error "unknown command"; help;;
esac
