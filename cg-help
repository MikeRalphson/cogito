#!/usr/bin/env bash
#
# Show help for Cogito commands.
# Copyright (c) Petr Baudis, 2005
#
# Takes an optional argument describing the command to show the help for.
# The command can be specified either as 'COMMAND' or 'cg-COMMAND'.
# If the argument is left out an overview of all the Cogito commands will
# be shown.
#
# Note help for a command is also available by passing `--help` or `-h`
# to the command.

USAGE="cg-help [COMMAND]"
_git_repo_unneeded=1

. ${COGITO_LIB}cg-Xlib


if [ "$1" ]; then
	cmd=$(echo "$1" | sed 's/^cg-//')
	( print_help $cmd ) && exit
	echo "cg-help: no help available for command \"$1\""
	echo "Call cg-help without any arguments for the list of available commands"
	exit 1
fi

bin_path="$(dirname $0)"

REGULAR_COMMANDS="$(ls $bin_path/cg-* | grep -v cg-admin- | grep -v cg-X)"
ADVANCED_COMMANDS="$(ls $bin_path/cg-admin-*)"

print_command_listing()
{
	for command in "$@"; do
		cmdname=$(basename $command)

		usage=$(sed -n '/^USAGE=/,0s/.*\(cg-.*\)"/\1/p' < $command)
		# Some minimal sanity check that we didn't pick up some
		# random binary named cg-*
		[ "$usage" ] || continue
		usage=$(echo "$usage" | sed 's/cg-[^ ]*//')
		printf "	%-17s %s\n" "$cmdname" "$usage"
	done
}


cat <<__END__
The Cogito version control system  $(cg-version)

Usage: cg-COMMAND [ARG]...

Available commands:
$(print_command_listing $REGULAR_COMMANDS)

Advanced (low-level or dangerous) commands:
$(print_command_listing $ADVANCED_COMMANDS)

These expressions can be used interchangably as "ID"s:
	empty string, "this" or "HEAD" (current HEAD)
	branch name (as registered with cg-branch-add)
	tag name (as registered with cg-tag)
	date string (as recognized by the date tool)
	shortcut hash (shorted unambiguous hash lead)
	commit object hash (as returned by commit-id)
	tree object hash (accepted only by some commands)

For details on individual commands, do e.g.:
	cg-help cg-log
	cg-log --help
(both variants are equivalent)
__END__
