#!/usr/bin/env bash
#
# Fetch changes from a remote branch to the local GIT repository.
# Copyright (c) Petr Baudis, 2005.
#
# Takes the branch name as an argument, defaulting to 'origin'.
#
# This will fetch the latest changes from a remote repository to the
# corresponding branch in your local repository. Note that this operation
# does not involve merging those changes to your own branch - that is being
# done by the `cg-merge` command. `cg-update` exists to conveniently bundle
# the act of fetching and merging to your working branch together.
#
# Before the first fetch, you have to tell Cogito about the remote branch.
# This should be done by the `cg-branch-add` command. See its documentation
# for the list of supported fetching protocols and other details. Note that
# one exception to this is the 'origin' branch, which was set to the location
# of the source repository if you created yours using the `cg-clone` command.
#
# Note that the operation now being performed by `cg-fetch` ('fetching')
# was called 'pulling' in the past. However, GIT recently changed this
# terminology, and after sufficient transition period, the 'pulling'
# expression will be instead used for the operation now performed by the
# `cg-update` command. Please do not let this confuse you.
#
# OPTIONS
# -------
# -f::
#	Force the complete fetch even if the heads are the same.
#
# -v::
#	Display more verbose output

USAGE="cg-fetch [-f] [-v] [BRANCH_NAME]"

. ${COGITO_LIB}cg-Xlib || exit 1
deprecated_alias cg-fetch cg-pull


fetch_progress()
{
	percentage=""
	objects=0
	last_objects=0
	size=0

	while read -r line; do
		object=

		case "$line" in
		link*|symlink*|copy*|\
		"got "[a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9]*|\
		"walk "[a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9]*)
			# Convert the sha to an object path
			object=$(echo "$line" | sed 's,.* \([a-f0-9][a-f0-9]\),\1/,')
			;;

		[a-f0-9][a-f0-9]/[a-f0-9][a-f0-9][a-f0-9][a-f0-9][a-f0-9]*)
			object="$line"
			# Estimate percentage done using the position of
			# the object subdir. It might not get all the way
			# up to 100% ...
			position=$(echo "$line" | cut -d/ -f 1)
			percentage=", $((0x$position * 100 / 0xff))% done"
			;;

		*)
			if [ "$last_objects" != "$objects" ]; then
				last_objects="$objects"
				echo;
			fi
			echo "$line"
			continue
			;;
		esac 

		object="$_git_objects/$object"
		[ -e "$object" ] && size=$(($size + $(stat -c '%s' "$object" 2>/dev/null)))
		objects=$(($objects + 1));

		echo -ne "progress: $objects objects, $size bytes$percentage\r"
	done;
	[ "$last_objects" != "$objects" ] && echo
}

show_changes_summary()
{
	local orig_head="$1"
	local new_head="$2"
	if [ ! "$orig_head" ]; then
		echo "New branch: $new_head"

	elif [ "$orig_head" != "$new_head" ]; then
		echo "Tree change: $orig_head:$new_head"
		if [ "$verbose" ] ; then
			git-diff-tree -r $(cg-object-id -t $orig_head) $(cg-object-id -t $new_head)
		else
			git-diff-tree -r $(cg-object-id -t $orig_head) $(cg-object-id -t $new_head) | awk '{ print $5" "$6 }'
		fi
	else
		echo "Up to date."
		exit
	fi
}


get_rsync()
{
	[ "$1" = "-b" ] && shift

	redir=
	if [ "$1" = "-i" ]; then # ignore-errors
		redir="2>/dev/null"
		shift
	fi

	filter="cat"
	if [ "$1" = "-s" ]; then # subsequent
		# We already saw the MOTD, thank you very much.
		filter="grep -v ^MOTD:"
		shift
	fi

	rsync_flags_l=
	if [ "$1" = "-u" ]; then # update
		rsync_flags_l="--ignore-existing"
		shift
	fi

	appenduri=
	if [ "$1" = "-d" ]; then # directory
		appenduri="/." # CowboyNeal
		shift
	fi

	eval rsync $RSYNC_FLAGS $rsync_flags_l -v -Lr \
		"$1$appenduri" "$2$appenduri" $redir | $filter
	return ${PIPESTATUS[0]}
}

fetch_rsync()
{
	get_rsync -s -u -d "$2/objects" "$_git_objects" | fetch_progress
	ret=${PIPESTATUS[0]}
	[ "$3" ] && cat "$_git/refs/${3%/*}/.${3##*/}-fetching" > "$_git/refs/$3"
	return $ret
}


get_http()
{
	[ "$1" = "-b" ] && shift
	[ "$1" = "-i" ] && shift
	[ "$1" = "-s" ] && shift

	wget_flags="-nv"

	update=
	if [ "$1" = "-u" ]; then
		wget_flags="$wget_flags -nc"
		update=1
		shift
	fi

	directory=
	if [ "$1" = "-d" ]; then
		wget_flags="$wget_flags -r -l 1 -np -nd -P"
		directory=/
		shift
	else
		wget_flags="$wget_flags -O"
	fi

	src="$1"
	dest="$2$directory"

	[ "$update" ] && ! [ "$directory" ] && [ -e "$dest" ] && return 1

	if echo "$dest" | grep -q '^\.git/'; then
		# wget is idiotic and convers . to _
		dest=$(echo "$dest" | sed 's#^.git/##')
		pushd $_git >/dev/null
	else
		pushd . >/dev/null
	fi

	wget $wget_flags "$dest" "$src" 2>&1 | grep -vF 'robots.txt' | grep -vF 'index.html'
	ret=${PIPESTATUS[0]}
	[ -d "$dest" ] && rm -f "$dest"/robots.txt "$dest"/index.html*
	popd >/dev/null
	return $ret
}

fetch_http()
{
	whead=
	[ "$3" ] && whead="-w $3"
	(git-http-fetch -a -v $whead $recovery "$1" "$2/" 2>&1 /dev/null) | fetch_progress
	return ${PIPESTATUS[0]}
}


get_ssh()
{
	[ "$1" = "-b" ] && shift
	[ "$1" = "-i" ] && shift
	[ "$1" = "-s" ] && shift

	scp_flags=

	update=
	if [ "$1" = "-u" ]; then
		update=1
		shift
	fi

	directory=
	if [ "$1" = "-d" ]; then
		scp_flags="$scp_flags -r"
		directory=1
		shift
	fi

	src=$(echo "$1" | sed 's#^git+ssh://\([^/]*\)\(/.*\)$#\1:\2#')
	dest="$2"

	[ "$update" ] && ! [ "$directory" ] && [ -e "$dest" ] && return 1
	[ "$update" ] && [ "$directory" ] &&
		echo "Warning: Cannot protect against overwriting $dest when fetching over ssh" 2>/dev/null

	[ "$directory" ] && dest=$(dirname "$dest")
	scp $scp_flags "$src" "$dest"
}

fetch_ssh()
{
	whead=
	[ "$3" ] && whead="-w $3"
	# git-ssh-fetch would theoretically take git+ssh://-style URL, but
	# it is buggy and won't process it correctly, so let's just
	# preprocess it to some easier-to-take form.
	(git-ssh-fetch -a -v $whead $recovery "$1" \
		"$(echo "$2" | sed 's#^git+ssh://\([^/]*\)\(/.*\)$#\1:\2#')" \
		2>&1 /dev/null) | fetch_progress
	return ${PIPESTATUS[0]}
}


get_local()
{
	cp_flags_l="-vdpR"
	if [ "$1" = "-b" ]; then
		cp_flags_l="-vb" # Dereference symlinks
		shift
	fi

	[ "$1" = "-i" ] && shift
	[ "$1" = "-s" ] && shift

	if [ "$1" = "-u" ]; then
		cp_flags_l="$cp_flags_l -fu$can_hardlink"
		shift
	fi

	cut_last=
	if [ "$1" = "-d" ]; then
		cut_last=1
		shift
	fi

	src="$1"
	dest="$2"
	[ "$cut_last" ] && dest=${dest%/*}

	cp $cp_flags_l "$src" "$dest"
}

fetch_local()
{
	whead=
	[ "$3" ] && whead="-w $3"
	(git-local-fetch -a -l -v $whead $recovery "$1" "$2" 2>&1 /dev/null) | fetch_progress
	return ${PIPESTATUS[0]}
}


recovery=
verbose=
while optparse; do
	if optparse -f; then
		# When forcing, let the fetch tools make more extensive
		# walk over the dependency tree with --recover.
		recovery=--recover
	elif optparse -v; then
		verbose=1
	else
		optfail
	fi
done

name=${ARGS[0]}

[ "$name" ] || { [ -s $_git/branches/origin ] && name=origin; }
[ "$name" ] || die "where to fetch from?"
uri=$(cat "$_git/branches/$name" 2>/dev/null) || die "unknown branch: $name"

rembranch=
if echo "$uri" | grep -q '#'; then
	rembranch=$(echo $uri | cut -d '#' -f 2)
	uri=$(echo $uri | cut -d '#' -f 1)
fi

# Some other process with the same pid might appear, that's why
# we won't die but rather let the user check quickly.
if [ -s "$_git/info/cg-fetch-$name-dirty" ]; then
	kill -0 $(cat "$_git/info/cg-fetch-$name-dirty") 2>/dev/null && \
		echo "Warning: Aren't you fetching $name twice at once? (waiting 10s)" >&2 && \
		sleep 10
	echo "Recovering from a previously interrupted fetch..."
	recovery=--recover
fi
mkdir -p "$_git/info"
echo $$ > "$_git/info/cg-fetch-$name-dirty"


orig_head=
[ -s "$_git/refs/heads/$name" ] && orig_head=$(cat "$_git/refs/heads/$name")


if echo "$uri" | grep -q "^(git|git+packed+ssh)://"; then
	# This is a really special case.
	uri="$(echo "$uri" | sed 's#^git+packed+ssh://\([^/]*\)\(/.*\)$#\1:\2#')"
	[ "$rembranch" ] || rembranch="HEAD"
	(
		git-fetch-pack "$uri" "$rembranch" || echo "failed" "$rembranch"
	) | while read sha1 remote_name; do
		[ "$sha1" = "failed" ] && die "fetching pack failed"
		echo "$sha1" >"$_git/refs/heads/$name"
	done || exit
	rm "$_git/info/cg-fetch-$name-dirty"
	show_changes_summary "$orig_head" "$(cg-object-id "$name")"
	exit 0
fi


if echo "$uri" | grep -q "^http://"; then
	get=get_http
	fetch=fetch_http
elif echo "$uri" | grep -q "^git+ssh://"; then
	get=get_ssh
	fetch=fetch_ssh
elif echo "$uri" | grep -q ":"; then
	echo "WARNING: The rsync access method is DEPRECATED and will be REMOVED in the future!" >&2
	get=get_rsync
	fetch=fetch_rsync
else
	[ -d $uri/.git ] && uri=$uri/.git
	get=get_local
	fetch=fetch_local

	# Perhaps the object database is shared
	symlinked=
	is_same_repo "$_git_objects" "$uri/objects" && symlinked=1

	# See if we can hardlink and add "-l" to cp flags.
	can_hardlink=
	sample_file=$(find $uri -type f -print | head -n 1)
	rm -f $_git/.,,lntest
	if cp -fl "$sample_file" "$_git/.,,lntest" 2>/dev/null; then
		can_hardlink=l
		echo "Using hard links"
	else
		echo "Hard links don't work - using copy"
	fi
	rm -f $_git/.,,lntest
fi


mkdir -p $_git/refs/heads
if [ "$rembranch" ]; then
	$get -i "$uri/refs/heads/$rembranch" "$_git/refs/heads/.$name-fetching" ||
		die "unable to get the head pointer of branch $rembranch"
else
	$get -b -s "$uri/HEAD" "$_git/refs/heads/.$name-fetching" ||
		die "unable to get the HEAD branch"
fi

new_head=$(cat "$_git/refs/heads/.$name-fetching")
if ! [ "$symlinked" ]; then
	if [ "$recovery" -o "$orig_head" != "$new_head" ]; then
		[ -d $_git_objects ] || mkdir -p $_git_objects
		$fetch "$(cat "$_git/refs/heads/.$name-fetching")" "$uri" "heads/$name" || die "objects fetch failed"
	fi
else
	cat "$_git/refs/heads/.$name-fetching" > "$_git/refs/heads/$name"
fi
rm "$_git/refs/heads/.$name-fetching"

# FIXME: Warn about conflicting tag names?
# XXX: We now throw stderr to /dev/null since not all repositories
# may have tags/ and users were confused by the harmless errors.
[ -d $_git/refs/tags ] || mkdir -p $_git/refs/tags
rsyncerr=
$get -i -s -u -d "$uri/refs/tags" "$_git/refs/tags" || rsyncerr=1
[ "$rsyncerr" ] && echo "unable to get tags list (non-fatal)" >&2

# Now check if we have the objects pointed at by the tags; if they are
# tag objects, $fetch didn't get them.
# XXX: This is the quick'n'dirty way.
(
	cd $_git/refs/tags
	for tag in *; do
		[ "$tag" = "*" ] && break
		tagid=$(cat $tag)
		GIT_DIR=../.. git-cat-file -t "$tagid" >/dev/null 2>&1 && continue
		echo -n "Missing object of tag $tag... "
		if [ "$fetch" != "fetch_rsync" ] && GIT_DIR=../.. $fetch "$tagid" "$uri" 2>/dev/null >&2; then
			echo "retrieved"
		else
			echo "unable to retrieve"
		fi
	done
)


rm "$_git/info/cg-fetch-$name-dirty"

show_changes_summary "$orig_head" "$new_head"
